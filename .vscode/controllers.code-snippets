{
  "[social-media-fitness] Add Controller": {
    "prefix": "add-controller",
    "body": [
      "import { badRequest, created, serverError } from '@/main/helpers/http';",
      "import { Controller } from '@/main/protocols/controller';",
      "import { HttpRequest, HttpResponse } from '@/main/protocols/http';",
      "",
      "export class Add${1:}Controller implements Controller {",
      "",
      "  private readonly Add${1:}UseCase: ${1:};",
      "",
      "  constructor(add${1:}UseCase: Add${1:}) {",
      "    this.add${1:}UseCase =  Add${1:}UseCase;",
      "  }",
      "",
      "  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {",
      "    try {",
      "      const data = httpRequest.body;",
      "      const user = httpRequest.user;",
      "",
      "      if (!user) return badRequest(new Error('user'));",
      "",
      "      const response = await this.add${1:}UseCase.add({...data, userId: user.id});",
      "      return created(response);",
      "    } catch (error) {",
      "      return serverError(error);",
      "    }",
      "  }",
      "}"
    ]
  },
  "[social-media-fitness] Load Controller": {
    "prefix": "load-controller",
    "body": [
      "import { badRequest, ok, serverError } from '@/main/helpers/http';",
      "import { Controller } from '@/main/protocols/controller';",
      "import { HttpRequest, HttpResponse } from '@/main/protocols/http';",
      "",
      "export class Load${1:}Controller implements Controller {",
      "",
      "  private readonly Load${1:}UseCase: Load${1:};",
      "",
      "  constructor(load${1:}UseCase: ${1:}) {",
      "    this.load${1:}UseCase =  Load${1:}UseCase;",
      "  }",
      "",
      "  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {",
      "    try {",
      "      const user = httpRequest.user;",
      "",
      "      if (!user) return badRequest(new Error('User not found'));",
      "",
      "      const response = await this.load${1:}UseCase.load(user.id);",
      "      return ok(response);",
      "    } catch (error) {",
      "      return serverError(error);",
      "    }",
      "  }",
      "}"
    ]
  },
  "[social-media-fitness] Update Controller": {
    "prefix": "update-controller",
    "body": [
      "import { badRequest, ok, serverError } from '@/main/helpers/http';",
      "import { Controller } from '@/main/protocols/controller';",
      "import { HttpRequest, HttpResponse } from '@/main/protocols/http';",
      "",
      "export class Update${1:}Controller implements Controller {",
      "",
      "  private readonly update${1:}UseCase: Update${1:};",
      "",
      "  constructor(update${1:}UseCase: Update${1:}) {",
      "    this.update${1:}UseCase =  update${1:}UseCase;",
      "  }",
      "",
      "  async handle(httpRequest: HttpRequest): Promise<HttpResponse> {",
      "    try {",
      "      const user = httpRequest.user;",
      "      const data = httpRequest.body;",
      "      const params = httpRequest.params;",
      "",
      "      if (!user) return badRequest(new Error('User not found'));",
      "      if (!params.id) return badRequest(new Error('Params ID not found'))",
      "      if (data.id !== undefined) return badRequest(new Error('You're trying to update the ID'));",
      "",
      "      const response = await this.update${1:}UseCase.updateById(params.id, user.id, data);",
      "      return ok(response);",
      "    } catch (error) {",
      "      return serverError(error);",
      "    }",
      "  }",
      "}"
    ]
  }
}
