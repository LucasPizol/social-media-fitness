// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  name     String
  email    String  @unique
  password String
  avatar   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes     Like[]
  comments  Comment[]
  exercises Exercise[]
  post      Post[]
  postMedia PostMedia[]
}

model Exercise {
  id Int @id @default(autoincrement())

  name      String
  weight    Float
  series    Int
  repeats   Int
  rest_time Int
  rest_type String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDisabled Boolean   @default(false)
  disabledAt DateTime?
}

model Post {
  id Int @id @default(autoincrement())

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  isDisabled Boolean   @default(false)
  disabledAt DateTime?

  likes     Like[]
  comments  Comment[]
  postMedia PostMedia[]
}

model PostMedia {
  id  Int    @id @default(autoincrement())
  url String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedById Int
  likedBy   User @relation(fields: [likedById], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
